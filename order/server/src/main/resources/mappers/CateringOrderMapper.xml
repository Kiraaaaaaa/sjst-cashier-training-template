<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.meituan.catering.management.order.dao.mapper.CateringOrderMapper">

    <resultMap id="BaseResultMap" type="com.meituan.catering.management.order.dao.model.CateringOrderDO">
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="tenant_id" jdbcType="BIGINT" property="tenantId"/>
        <result column="created_by" jdbcType="BIGINT" property="createdBy"/>
        <result column="created_at" jdbcType="TIMESTAMP" property="createdAt"/>
        <result column="last_modified_by" jdbcType="BIGINT" property="lastModifiedBy"/>
        <result column="last_modified_at" jdbcType="TIMESTAMP" property="lastModifiedAt"/>
        <result column="version" jdbcType="INTEGER" property="version"/>
        <result column="status" jdbcType="VARCHAR" property="status"/>
        <result column="shop_id" jdbcType="BIGINT" property="shopId"/>
        <result column="shop_business_no" jdbcType="VARCHAR" property="shopBusinessNo"/>
        <result column="shop_name_on_place" jdbcType="VARCHAR" property="shopNameOnPlace"/>
        <result column="table_no" jdbcType="VARCHAR" property="tableNo"/>
        <result column="customer_count" jdbcType="VARCHAR" property="customerCount"/>
        <result column="total_price" jdbcType="DECIMAL" property="totalPrice"/>
        <result column="comment" jdbcType="VARCHAR" property="comment"/>
        <result column="billing_promotion" jdbcType="DECIMAL" property="billingPromotion"/>
        <result column="billing_paid" jdbcType="DECIMAL" property="billingPaid"/>
        <result column="billing_payment_channel" jdbcType="VARCHAR" property="billingPaymentChannel"/>
    </resultMap>

    <sql id="Base_Column_List">
        id
        ,tenant_id
        ,created_by
        ,created_at
        ,last_modified_by
        ,last_modified_at
        ,version
        ,status
        ,shop_id
        ,shop_business_no
        ,shop_name_on_place
        ,table_no
        ,customer_count
        ,total_price
        ,comment
        ,billing_promotion
        ,billing_paid
        ,billing_payment_channel
    </sql>
    <insert id="insert" useGeneratedKeys="true" keyProperty="id">
        insert into `catering_order` (<include refid="Base_Column_List"/>)
        values(
        0
        ,#{tenantId}
        ,#{createdBy}
        ,#{createdAt}
        ,#{lastModifiedBy}
        ,#{lastModifiedAt}
        ,#{version}
        ,#{status}
        ,#{shopId}
        ,#{shopBusinessNo}
        ,#{shopNameOnPlace}
        ,#{tableNo}
        ,#{customerCount}
        ,#{totalPrice}
        ,#{comment}
        ,#{billingPromotion}
        ,#{billingPaid}
        ,#{billingPaymentChannel}
        )
    </insert>
    <update id="update">
        update `catering_order`
        <set>
            `version` = #{version}+1
            ,`last_modified_by` = #{lastModifiedBy}
            ,`last_modified_at` = #{lastModifiedAt}
            <if test="status!=null">
                ,`status` = #{status}
            </if>
            <if test="billingPromotion != null">
                ,`billing_promotion` = #{billingPromotion}
            </if>
            <if test="billingPaid != null">
                ,`billing_paid` = #{billingPaid}
            </if>
            <if test="billingPaymentChannel != null">
                ,`billing_payment_channel` = #{billingPaymentChannel}
            </if>
        </set>
        <where>
            `tenant_id` = #{tenantId}
            and `version` = #{version}
            and `id` = #{id}
        </where>
    </update>


    <select id="queryById" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from `catering_order`
        where `id` = #{orderId}
        and `tenant_id` = #{tenantId}
    </select>

    <select id="searchForPage" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from `catering_order`
        <where>
            <if test="tenantId != null">
                and `tenant_id` = #{tenantId}
            </if>
            <if test="condition.status != null">
                and `status` = #{condition.status}
            </if>
            <if test="condition.tableNo != null">
                and `table_no` = #{condition.tableNo}
            </if>
            <if test="condition.customerCount != null">
                and `customer_count` = #{condition.customerCount}
            </if>
            <if test="condition.totalPrice.from != null and condition.totalPrice.to != null">
                and `total_price` between #{condition.totalPrice.from} and #{condition.totalPrice.to}
            </if>
        </where>
        <if test="sortFields.size != 0">
            ORDER BY
            <foreach collection="sortFields" item="sortField" separator=",">
                <choose>
                    <when test="sortField.field == 'status'">
                        CASE
                        WHEN ${sortField.field} = "PLACED" THEN 1
                        WHEN ${sortField.field} = "PREPARING" THEN 2
                        WHEN ${sortField.field} = "PREPARED" THEN 3
                        WHEN ${sortField.field} = "DRAFT" THEN 4
                        WHEN ${sortField.field} = "BILLED" THEN 5
                        WHEN ${sortField.field} = "CANCELLED" THEN 6
                        END ${sortField.asc}
                    </when>
                    <when test="sortField.field != 'status'">
                        ${sortField.field} ${sortField.asc}
                    </when>
                </choose>
            </foreach>
        </if>
        <if test="pageIndex != null and pageSize!=null">
            limit #{skip},#{limit}
        </if>
    </select>
    <select id="countForPage" resultType="java.lang.Integer">
        select
        count(*)
        from `catering_order`
        <where>
            <if test="tenantId != null">
                and `tenant_id` = #{tenantId}
            </if>
            <if test="condition.status != null">
                and `status` = #{condition.status}
            </if>
            <if test="condition.tableNo != null">
                and `table_no` = #{condition.tableNo}
            </if>
            <if test="condition.customerCount != null">
                and `customer_count` = #{condition.customerCount}
            </if>
            <if test="condition.totalPrice.from != null and condition.totalPrice.to != null">
                and `total_price` between #{condition.totalPrice.from} and #{condition.totalPrice.to}
            </if>
        </where>
    </select>
</mapper>